// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusType {
  active
  inactive
  pending
}

enum Position {
  header
  footer
  sidebar
}

enum Platform {
  facebook
  instagram
  twitter
  linkedin
  youtube
  tiktok
  whatsapp
  other
}

enum Role {
  user
  operator
  admin
}

enum TargetType {
  profile
  service
  article
}

enum Action {
  approved
  rejected
}

enum LocationType {
  provinsi
  kabupaten
  kota
  kecamatan
}

model User {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar
  email           String            @unique
  password        String?           @db.VarChar(255)
  role            Role?             @default(user) @map("role")
  phoneNumber     String?           @map("phone_number") @db.VarChar(16)
  registerKey     String?           @map("register_key")
  isActive        Boolean?          @default(false) @map("is_active")
  googleTokenId   String?           @map("google_token_id")
  imageUrl        String?           @map("image_url")
  createdAt       DateTime?         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?         @updatedAt @map("updated_at")
  BusinessProfile BusinessProfile[]
  Validation      Validation[]
  Notification    Notification[]

  @@map("users")
}

model Advantages {
  id          Int        @id @default(autoincrement()) @map("id")
  title       String     @map("title")
  description String     @map("description")
  icon        String?    @map("icon")
  sortOrder   Int?       @map("sort_order")
  status      StatusType @default(inactive) @map("status")
  updatedAt   DateTime?  @updatedAt @map("updated_at")
  createdAt   DateTime?  @default(now()) @map("created_at")

  @@map("advantages")
}

model Category {
  id          Int       @id @default(autoincrement()) @map("id")
  name        String    @map("name")
  slug        String    @unique @map("slug")
  seoConfigId Int?      @map("seo_config_id")
  parentId    Int?      @map("parent_id")
  imageUrl    String?   @map("image_url") @db.VarChar()
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  parent   Category?   @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children Category[]  @relation("CategoryToParent")
  seo      SeoConfigs? @relation(fields: [seoConfigId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  services Service[]

  @@map("categories")
}

model Menu {
  id        Int        @id @default(autoincrement())
  name      String
  url       String     @map("url")
  icon      String?    @db.VarChar()
  position  Position   @default(header) @map("position")
  sortOrder Int?       @default(0) @map("sort_order") @db.SmallInt()
  status    StatusType @default(inactive) @map("status")
  parentId  Int?       @map("parent_id")
  createdAt DateTime?  @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")

  parent   Menu?  @relation("MenuToSub", fields: [parentId], references: [id])
  children Menu[] @relation("MenuToSub")

  @@map("menus")
}

model Service {
  id          Int        @id @default(autoincrement()) @map("id")
  name        String     @map("name")
  slug        String?    @unique @map("slug")
  description String?    @map("description")
  price       Decimal?   @default(0) @db.Decimal(15, 2)
  status      StatusType @default(pending) @map("status")
  terms       String?    @map("terms") @db.Text()
  createdAt   DateTime?  @default(now()) @map("created_at")
  updatedAt   DateTime?  @updatedAt @map("updated_at")
  categoryId  Int        @map("category_id")
  profileId   Int        @map("profile_id")
  seoConfigId Int?       @map("seo_config_id")

  category        Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seo             SeoConfigs?     @relation(fields: [seoConfigId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  businessProfile BusinessProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("services")
}

model SeoConfigs {
  id            Int       @id @default(autoincrement()) @map("id")
  title         String    @map("title")
  description   String?   @map("description")
  keywords      String?   @map("keywords")
  ogTitle       String?   @map("og_title")
  ogDescription String?   @map("og_description")
  ogImage       String?   @map("og_image")
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  Service  Service[]
  Category Category[]

  @@map("seo_configs")
}

model Slider {
  id        Int        @id @default(autoincrement())
  title     String     @map("title")
  caption   String?    @map("caption")
  imageUrl  String     @map("image_url")
  link      String?    @map("link")
  sortOrder Int?       @map("sort_order")
  status    StatusType @default(inactive) @map("status")
  createdAt DateTime?  @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")

  @@map("sliders")
}

model Setting {
  siteName               String    @unique() @map("site_name")
  logo                   String?   @map("logo")
  description            String?   @map("description")
  metaKeywords           String?   @map("meta_keywords")
  metaTitle              String    @map("meta_title")
  metaDescription        String    @map("meta_description")
  ogTitle                String?   @map("og_title")
  ogDescription          String?   @map("og_description")
  googleSiteVerification String?   @map("google_site_verification")
  contactEmail           String?   @map("contact_email")
  contactPhone           String?   @map("contact_phone")
  address                String?   @map("address")
  facebookUrl            String?   @map("facebook_url")
  instagramUrl           String?   @map("instagram_url")
  twitterUrl             String?   @map("twitter_url")
  linkedinUrl            String?   @map("linkedin_url")
  youtubeUrl             String?   @map("youtube_url")
  whatsappUrl            String?   @map("whatsapp_url")
  createdAt              DateTime? @default(now()) @map("created_at")
  updatedAt              DateTime? @updatedAt @map("updated_at")

  @@map("settings")
}

model BusinessProfile {
  id               Int                @id @default(autoincrement())
  userId           Int?               @map("user_id") @db.Integer()
  businessName     String             @map("business_name")
  description      String?            @map("description")
  websiteUrl       String?            @map("website_url")
  slug             String?            @unique
  status           StatusType         @default(inactive) @map("status")
  createdAt        DateTime?          @default(now()) @map("created_at")
  updatedAt        DateTime?          @updatedAt @map("updated_at")
  User             User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  BusinessSocial   BusinessSocial[]
  BusinessContact  BusinessContact[]
  Service          Service[]
  BusinessLocation BusinessLocation[]

  @@map("business_profiles")
}

model BusinessSocial {
  id        Int       @id @default(autoincrement())
  profileId Int       @map("profile_id")
  name      String?
  platform  Platform  @default(other) @map("platform")
  url       String?   @map("url")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  businessProfile BusinessProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("business_socials")
}

model BusinessContact {
  id             Int       @id @default(autoincrement())
  profileId      Int       @map("profile_id")
  whatsappNumber String    @map("whatsapp_number")
  createdAt      DateTime? @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  businessProfile BusinessProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("business_contacts")
}

model Validation {
  id           Int        @id @default(autoincrement())
  operatorId   Int?       @map("operator_id")
  operatorName String?    @map("operator_name")
  targetType   TargetType @map("target_type")
  targetId     Int        @map("target_id")
  action       Action?    @map("action")
  note         String?    @map("note") @db.Text()
  validatedAt  DateTime?  @map("validated_at") @db.Timestamptz()
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")
  operator     User?      @relation(fields: [operatorId], references: [id], onDelete: SetNull)

  @@map("validations")
}

model Image {
  id         Int        @id @default(autoincrement())
  entityType TargetType @default(profile) @map("entity_type")
  entityId   Int        @map("entity_id")
  imageUrl   String     @map("image_url")
  createdAt  DateTime?  @default(now()) @map("created_at")
  updatedAt  DateTime?  @updatedAt @map("updated_at")

  @@map("images")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  title     String?   @map("title")
  message   String?   @map("message")
  isRead    Boolean   @default(false) @map("is_read")
  url       String?   @db.VarChar()
  type      String?   @db.VarChar()
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Province {
  id               Int                @id @default(autoincrement())
  name             String
  slug             String?            @unique
  createdAt        DateTime?          @default(now()) @map("created_at")
  updatedAt        DateTime?          @updatedAt @map("updated_at")
  regencies        Regency[]
  businessLocation BusinessLocation[]

  @@map("provinces")
}

model Regency {
  id         Int       @id @default(autoincrement())
  name       String
  slug       String?   @unique
  provinceId Int       @map("province_id")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  province         Province           @relation(fields: [provinceId], references: [id])
  districts        District[]
  businessLocation BusinessLocation[]

  @@map("regencies")
}

model District {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String?   @unique
  regencyId Int       @map("regency_id")
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  regency   Regency            @relation(fields: [regencyId], references: [id])
  locations BusinessLocation[]

  @@map("districts")
}

model BusinessLocation {
  id         Int     @id @default(autoincrement())
  profileId  Int     @map("profile_id")
  address    String?
  provinceId Int     @map("province_id")
  regencyId  Int     @map("regency_id")
  districtId Int     @map("district_id")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  businessProfile BusinessProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  province        Province        @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  regency         Regency         @relation(fields: [regencyId], references: [id], onDelete: Cascade)
  district        District        @relation(fields: [districtId], references: [id], onDelete: Cascade)

  @@map("business_locations")
}
